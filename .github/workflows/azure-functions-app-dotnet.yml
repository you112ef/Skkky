# Medical Lab Analyzer - Azure Functions Deployment (.NET)
# Updated for Windows Server 2025 compatibility (GitHub Actions Issue #12677)
# This workflow builds and deploys .NET Azure Functions with support for Windows Server 2025 migration

name: Deploy Medical Lab Functions to Azure (.NET)

on:
  push:
    branches: ["main", "develop"]
    paths:
      - 'MedicalLabAnalyzer/Functions/**'
      - '.github/workflows/azure-functions-app-dotnet.yml'
  pull_request:
    branches: ["main"]
    paths:
      - 'MedicalLabAnalyzer/Functions/**'
      - '.github/workflows/azure-functions-app-dotnet.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      runner_os:
        description: 'Choose Windows runner version'
        required: false
        default: 'windows-latest'
        type: choice
        options:
          - windows-latest
          - windows-2022
          - windows-2019

env:
  # Azure Functions configuration for Medical Lab Analyzer
  AZURE_FUNCTIONAPP_NAME: ${{ vars.AZURE_FUNCTIONAPP_NAME || 'medical-lab-functions' }}
  AZURE_FUNCTIONAPP_PACKAGE_PATH: 'MedicalLabAnalyzer/Functions'
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  BUILD_CONFIGURATION: 'Release'
  
  # Windows Server 2025 compatibility settings
  FUNCTIONS_WORKER_RUNTIME: 'dotnet-isolated'
  FUNCTIONS_EXTENSION_VERSION: '~4'
  
jobs:
  # Environment validation and preflight checks
  validate:
    name: Validate Environment
    runs-on: ${{ github.event.inputs.runner_os || 'windows-latest' }}
    environment: ${{ github.event.inputs.environment || 'dev' }}
    outputs:
      deployment-environment: ${{ steps.env-check.outputs.environment }}
      function-app-name: ${{ steps.env-check.outputs.function-app-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Validate environment configuration
        id: env-check
        shell: powershell
        run: |
          $environment = "${{ github.event.inputs.environment || 'dev' }}"
          $functionAppName = "${{ env.AZURE_FUNCTIONAPP_NAME }}-$environment"
          
          Write-Host " Deployment Environment: $environment"
          Write-Host " Function App Name: $functionAppName"
          Write-Host " .NET Version: ${{ env.DOTNET_VERSION }}"
          Write-Host " Functions Runtime: ${{ env.FUNCTIONS_WORKER_RUNTIME }}"
          
          # Check if Functions project exists
          if (!(Test-Path "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}")) {
            Write-Warning " Functions project path not found: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"
            Write-Host " This workflow will skip deployment if no Functions project is found"
          } else {
            Write-Host " Functions project found"
          }
          
          $envOutput = 'environment=' + $environment
          Add-Content -Path $env:GITHUB_OUTPUT -Value $envOutput
          $appOutput = 'function-app-name=' + $functionAppName
          Add-Content -Path $env:GITHUB_OUTPUT -Value $appOutput
      
      - name: Check Azure credentials
        shell: powershell
        run: |
          if ("${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}" -eq "") {
            if ("${{ secrets.AZURE_RBAC_CREDENTIALS }}" -eq "") {
              Write-Error " Neither AZURE_FUNCTIONAPP_PUBLISH_PROFILE nor AZURE_RBAC_CREDENTIALS are configured"
              Write-Host " Please configure one of the following secrets:"
              Write-Host "   - AZURE_FUNCTIONAPP_PUBLISH_PROFILE (recommended)"
              Write-Host "   - AZURE_RBAC_CREDENTIALS (for RBAC authentication)"
              exit 1
            } else {
              Write-Host " Using RBAC authentication"
            }
          } else {
            Write-Host " Using publish profile authentication"
          }

  # Build and deploy Azure Functions
  build-and-deploy:
    name: Build and Deploy Functions
    needs: validate
    runs-on: ${{ github.event.inputs.runner_os || 'windows-latest' }}
    environment: ${{ needs.validate.outputs.deployment-environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      # Azure login if using RBAC
      - name: Azure Login (RBAC)
        if: env.AZURE_RBAC_CREDENTIALS != ''
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }}
      
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-functions-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-functions-
            ${{ runner.os }}-nuget-
      
      - name: Check Functions project
        id: check-project
        shell: powershell
        run: |
          if (Test-Path "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}") {
            Write-Host " Functions project found at: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"
            $projectExistsOutput = 'project-exists=true'
            Add-Content -Path $env:GITHUB_OUTPUT -Value $projectExistsOutput
            
            # Look for project files
            $projectFiles = Get-ChildItem -Path "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}" -Filter "*.csproj" -Recurse
            if ($projectFiles.Count -gt 0) {
              $projectFile = $projectFiles[0].FullName
              Write-Host " Project file: $projectFile"
              $projectFileOutput = 'project-file=' + $projectFile
              Add-Content -Path $env:GITHUB_OUTPUT -Value $projectFileOutput
            } else {
              Write-Error " No .csproj file found in Functions directory"
              exit 1
            }
          } else {
            Write-Host " No Functions project found, skipping deployment"
            $projectExistsOutput = 'project-exists=false'
            Add-Content -Path $env:GITHUB_OUTPUT -Value $projectExistsOutput
          }
      
      - name: Restore NuGet packages
        if: steps.check-project.outputs.project-exists == 'true'
        shell: powershell
        run: |
          Write-Host " Restoring NuGet packages for Functions..."
          Push-Location "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"
          try {
            dotnet restore --verbosity minimal
            if ($LASTEXITCODE -ne 0) {
              Write-Error " Package restore failed"
              exit 1
            }
            Write-Host " Packages restored successfully"
          } finally {
            Pop-Location
          }
      
      - name: Build Functions project
        if: steps.check-project.outputs.project-exists == 'true'
        shell: powershell
        run: |
          Write-Host " Building Azure Functions project..."
          Push-Location "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"
          try {
            dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore --verbosity minimal
            if ($LASTEXITCODE -ne 0) {
              Write-Error " Build failed"
              exit 1
            }
            Write-Host " Build completed successfully"
          } finally {
            Pop-Location
          }
      
      - name: Run Function tests
        if: steps.check-project.outputs.project-exists == 'true'
        shell: powershell
        run: |
          Write-Host " Running Function tests..."
          
          # Look for test projects in Functions directory
          $testProjects = Get-ChildItem -Path "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}" -Filter "*.Tests.csproj" -Recurse
          
          if ($testProjects.Count -eq 0) {
            Write-Host " No test projects found in Functions directory"
          } else {
            Push-Location "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"
            try {
              foreach ($testProject in $testProjects) {
                Write-Host " Running tests in $($testProject.Name)..."
                dotnet test $testProject.FullName --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity minimal
                
                if ($LASTEXITCODE -ne 0) {
                  Write-Error " Tests failed in $($testProject.Name)"
                  exit 1
                }
              }
              Write-Host " All Function tests passed"
            } finally {
              Pop-Location
            }
          }
      
      - name: Publish Functions project
        if: steps.check-project.outputs.project-exists == 'true'
        shell: powershell
        run: |
          Write-Host " Publishing Azure Functions..."
          
          $outputPath = "./output"
          
          Push-Location "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}"
          try {
            dotnet publish --configuration ${{ env.BUILD_CONFIGURATION }} --output $outputPath --no-restore --verbosity minimal
            if ($LASTEXITCODE -ne 0) {
              Write-Error " Publish failed"
              exit 1
            }
            
            Write-Host " Functions published successfully"
            
            # Verify critical files
            $hostJsonPath = Join-Path $outputPath "host.json"
            if (Test-Path $hostJsonPath) {
              Write-Host " host.json found"
            } else {
              Write-Warning " host.json not found - this may cause deployment issues"
            }
            
          } finally {
            Pop-Location
          }
      
      - name: Deploy to Azure Functions
        if: steps.check-project.outputs.project-exists == 'true'
        uses: Azure/functions-action@v1
        id: deploy
        with:
          app-name: ${{ needs.validate.outputs.function-app-name }}
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
          respect-funcignore: true
      
      - name: Verify deployment
        if: steps.check-project.outputs.project-exists == 'true'
        shell: powershell
        run: |
          Write-Host " Verifying deployment..."
          
          $functionAppUrl = "https://${{ needs.validate.outputs.function-app-name }}.azurewebsites.net"
          
          Write-Host "🌐 Function App URL: $functionAppUrl"
          Write-Host " Checking health endpoint..."
          
          try {
            $response = Invoke-WebRequest -Uri "$functionAppUrl/api/health" -Method GET -TimeoutSec 30 -ErrorAction SilentlyContinue
            if ($response.StatusCode -eq 200) {
              Write-Host " Health check passed"
            } else {
              Write-Warning " Health check returned status: $($response.StatusCode)"
            }
          } catch {
            Write-Warning " Health check endpoint not available (this is normal if no health endpoint is implemented)"
          }
          
          Write-Host " Deployment verification completed"
      
      - name: Create deployment summary
        if: steps.check-project.outputs.project-exists == 'true'
        shell: powershell
        run: |
          $summary = @"
          ##  Azure Functions Deployment Summary
          
          **Environment:** ${{ needs.validate.outputs.deployment-environment }}
          **Function App:** ${{ needs.validate.outputs.function-app-name }}
          **Runtime:** ${{ env.FUNCTIONS_WORKER_RUNTIME }}
          **Version:** ${{ env.FUNCTIONS_EXTENSION_VERSION }}
          
          **Build Information:**
          -  Configuration: ${{ env.BUILD_CONFIGURATION }}
          -  .NET Version: ${{ env.DOTNET_VERSION }}
          -  Runner: ${{ runner.os }}
          -  Deployed: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
          -  Commit: ${{ github.sha }}
          
          **Features:**
          -  Windows Server 2025 Compatible
          -  .NET 8 Isolated Functions
          -  Medical Lab Data Processing
          -  AI Integration Support
          -  Secure Azure Deployment
          
          **Access:**
          - 🌐 Function App: https://${{ needs.validate.outputs.function-app-name }}.azurewebsites.net
          -  Azure Portal: https://portal.azure.com/#@/resource/subscriptions/.../resourceGroups/.../providers/Microsoft.Web/sites/${{ needs.validate.outputs.function-app-name }}
          
          "@
          
          Write-Host $summary
          
          # Add to job summary
          $summary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Encoding UTF8
