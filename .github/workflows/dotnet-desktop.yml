# Medical Lab Analyzer - .NET Desktop Build Workflow
# Updated for Windows Server 2025 compatibility (GitHub Actions Issue #12677)
# This workflow builds, tests, and packages the Medical Lab Analyzer WPF application
# with full support for Windows Server 2025 migration

name: Medical Lab Analyzer - Desktop Build

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'MedicalLabAnalyzer/**'
      - '.github/workflows/dotnet-desktop.yml'
  pull_request:
    branches: [ "main", "develop" ]
    paths:
      - 'MedicalLabAnalyzer/**'
      - '.github/workflows/dotnet-desktop.yml'
  workflow_dispatch:
    inputs:
      runner_os:
        description: 'Choose Windows runner version'
        required: false
        default: 'windows-latest'
        type: choice
        options:
          - windows-latest
          - windows-2022
          - windows-2019

env:
  # Project configuration for Medical Lab Analyzer
  PROJECT_NAME: MedicalLabAnalyzer
  SOLUTION_PATH: MedicalLabAnalyzer/MedicalLabAnalyzer.sln
  PROJECT_PATH: MedicalLabAnalyzer/MedicalLabAnalyzer.csproj
  BUILD_PATH: MedicalLabAnalyzer/bin/Release/net8.0-windows
  PUBLISH_PATH: MedicalLabAnalyzer/bin/Publish
  ARTIFACTS_PATH: artifacts
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  # Pre-flight checks and environment setup
  preflight:
    name: Environment Check
    runs-on: ${{ github.event.inputs.runner_os || 'windows-latest' }}
    outputs:
      runner-info: ${{ steps.runner-info.outputs.info }}
      dotnet-info: ${{ steps.dotnet-info.outputs.info }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Get runner information
        id: runner-info
        shell: powershell
        run: |
          $runnerInfo = @{
            'OS' = $env:RUNNER_OS
            'OSVersion' = (Get-CimInstance Win32_OperatingSystem).Caption
            'Architecture' = $env:RUNNER_ARCH
            'TotalMemory' = [math]::Round((Get-CimInstance Win32_ComputerSystem).TotalPhysicalMemory / 1GB, 2)
            'AvailableSpace' = [math]::Round((Get-WmiObject -Class Win32_LogicalDisk -Filter "DriveType=3" | Where-Object DeviceID -eq "C:" | Select-Object -ExpandProperty FreeSpace) / 1GB, 2)
          }
          $jsonInfo = $runnerInfo | ConvertTo-Json -Compress
          $output = 'info=' + $jsonInfo
          Add-Content -Path $env:GITHUB_OUTPUT -Value $output
          Write-Host " Runner OS: $($runnerInfo.OSVersion)"
          Write-Host " Architecture: $($runnerInfo.Architecture)"
          Write-Host " Memory: $($runnerInfo.TotalMemory) GB"
          Write-Host " Available Space: $($runnerInfo.AvailableSpace) GB"
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Get .NET information
        id: dotnet-info
        shell: powershell
        run: |
          $dotnetInfo = dotnet --info
          Write-Host " .NET SDK Information:"
          Write-Host $dotnetInfo
          $sdkVersion = dotnet --version
          $output = 'info=' + $sdkVersion
          Add-Content -Path $env:GITHUB_OUTPUT -Value $output

  # Build and test matrix
  build:
    name: Build (${{ matrix.configuration }}, ${{ matrix.runtime }})
    needs: preflight
    strategy:
      fail-fast: false
      matrix:
        configuration: [Debug, Release]
        runtime: [win-x64, win-x86]
        exclude:
          # Exclude Debug x86 to reduce build time
          - configuration: Debug
            runtime: win-x86
    
    runs-on: ${{ github.event.inputs.runner_os || 'windows-latest' }}
    
    env:
      Configuration: ${{ matrix.configuration }}
      Runtime: ${{ matrix.runtime }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: Verify project structure
        shell: powershell
        run: |
          Write-Host " Verifying project structure..."
          if (!(Test-Path "${{ env.PROJECT_PATH }}")) {
            Write-Error " Project file not found: ${{ env.PROJECT_PATH }}"
            exit 1
          }
          Write-Host " Project file found: ${{ env.PROJECT_PATH }}"
          
          if (Test-Path "${{ env.SOLUTION_PATH }}") {
            Write-Host " Solution file found: ${{ env.SOLUTION_PATH }}"
          } else {
            Write-Host " Solution file not found, using project file directly"
          }
      
      - name: Restore NuGet packages
        shell: powershell
        run: |
          Write-Host " Restoring NuGet packages..."
          dotnet restore "${{ env.PROJECT_PATH }}" --verbosity minimal
          if ($LASTEXITCODE -ne 0) {
            Write-Error " Package restore failed"
            exit 1
          }
          Write-Host " Packages restored successfully"
      
      - name: Build application
        shell: powershell
        run: |
          Write-Host " Building Medical Lab Analyzer (${{ matrix.configuration }}, ${{ matrix.runtime }})..."
          
          $buildParams = @(
            "build",
            "${{ env.PROJECT_PATH }}",
            "--configuration", "${{ matrix.configuration }}",
            "--runtime", "${{ matrix.runtime }}",
            "--no-restore",
            "--verbosity", "minimal",
            "/p:Platform=AnyCPU",
            "/p:PublishSingleFile=false"
          )
          
          & dotnet @buildParams
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error " Build failed for ${{ matrix.configuration }} ${{ matrix.runtime }}"
            exit 1
          }
          Write-Host " Build completed successfully"
      
      - name: Run unit tests
        if: matrix.configuration == 'Debug'
        shell: powershell
        run: |
          Write-Host " Running unit tests..."
          
          # Look for test projects
          $testProjects = Get-ChildItem -Recurse -Filter "*.Tests.csproj" -Path "MedicalLabAnalyzer"
          
          if ($testProjects.Count -eq 0) {
            Write-Host " No test projects found, skipping tests"
          } else {
            foreach ($testProject in $testProjects) {
              Write-Host " Running tests in $($testProject.Name)..."
              dotnet test $testProject.FullName --configuration ${{ matrix.configuration }} --no-build --verbosity minimal --logger trx --collect:"XPlat Code Coverage"
              
              if ($LASTEXITCODE -ne 0) {
                Write-Error " Tests failed in $($testProject.Name)"
                exit 1
              }
            }
            Write-Host " All tests passed"
          }
      
      - name: Publish application
        if: matrix.configuration == 'Release'
        shell: powershell
        run: |
          Write-Host " Publishing Medical Lab Analyzer..."
          
          $publishPath = "${{ env.ARTIFACTS_PATH }}\${{ matrix.runtime }}"
          
          $publishParams = @(
            "publish",
            "${{ env.PROJECT_PATH }}",
            "--configuration", "${{ matrix.configuration }}",
            "--runtime", "${{ matrix.runtime }}",
            "--self-contained", "true",
            "--output", $publishPath,
            "--no-restore",
            "--verbosity", "minimal",
            "/p:PublishSingleFile=true",
            "/p:IncludeNativeLibrariesForSelfExtract=true",
            "/p:PublishTrimmed=false"
          )
          
          & dotnet @publishParams
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error " Publish failed"
            exit 1
          }
          
          Write-Host " Publish completed successfully"
          
          # Verify published files
          $exePath = Join-Path $publishPath "${{ env.PROJECT_NAME }}.exe"
          if (Test-Path $exePath) {
            $fileSize = [math]::Round((Get-Item $exePath).Length / 1MB, 2)
            Write-Host " Executable created: ${{ env.PROJECT_NAME }}.exe ($fileSize MB)"
          } else {
            Write-Error " Executable not found after publish"
            exit 1
          }
      
      - name: Create deployment package
        if: matrix.configuration == 'Release'
        shell: powershell
        run: |
          Write-Host " Creating deployment package..."
          
          $sourceDir = "${{ env.ARTIFACTS_PATH }}\${{ matrix.runtime }}"
          $packageDir = "${{ env.ARTIFACTS_PATH }}\package\${{ matrix.runtime }}"
          
          # Create package structure
          New-Item -ItemType Directory -Path $packageDir -Force | Out-Null
          
          # Copy published files
          Copy-Item -Path "$sourceDir\*" -Destination $packageDir -Recurse -Force
          
          # Copy additional resources if they exist
          $resourceDirs = @(
            "MedicalLabAnalyzer\AI",
            "MedicalLabAnalyzer\Database",
            "MedicalLabAnalyzer\Resources"
          )
          
          foreach ($dir in $resourceDirs) {
            if (Test-Path $dir) {
              $destDir = Join-Path $packageDir (Split-Path $dir -Leaf)
              Copy-Item -Path $dir -Destination $destDir -Recurse -Force
              Write-Host " Copied: $dir -> $destDir"
            }
          }
          
          # Copy important files
          $importantFiles = @(
            "MedicalLabAnalyzer\README.md",
            "MedicalLabAnalyzer\BuildDeploy.ps1"
          )
          
          foreach ($file in $importantFiles) {
            if (Test-Path $file) {
              Copy-Item -Path $file -Destination $packageDir -Force
              Write-Host " Copied: $file"
            }
          }
          
          Write-Host " Deployment package created"
      
      - name: Upload build artifacts
        if: matrix.configuration == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: MedicalLabAnalyzer-${{ matrix.runtime }}-${{ github.sha }}
          path: ${{ env.ARTIFACTS_PATH }}/package/${{ matrix.runtime }}
          retention-days: 30
      
      - name: Upload test results
        if: matrix.configuration == 'Debug' && always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.runtime }}
          path: '**/*.trx'
          retention-days: 7

  # Create GitHub Release (only on main branch and Release builds)
  release:
    name: Create Release
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ${{ github.event.inputs.runner_os || 'windows-latest' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: MedicalLabAnalyzer-*
          path: release-artifacts
      
      - name: Create release packages
        shell: powershell
        run: |
          Write-Host " Creating release packages..."
          
          $version = "v1.0.0-$(Get-Date -Format 'yyyyMMdd')-$($env:GITHUB_SHA.Substring(0,7))"
          
          # Create zip files for each runtime
          Get-ChildItem "release-artifacts" -Directory | ForEach-Object {
            $runtimeName = $_.Name -replace "MedicalLabAnalyzer-(.+)-.*", '$1'
            $zipPath = "MedicalLabAnalyzer-$version-$runtimeName.zip"
            
            Compress-Archive -Path "$($_.FullName)\*" -DestinationPath $zipPath -Force
            $zipSize = [math]::Round((Get-Item $zipPath).Length / 1MB, 2)
            
            Write-Host " Created: $zipPath ($zipSize MB)"
          }
      
      - name: Generate release notes
        shell: powershell
        run: |
          $releaseNotes = @"
          # Medical Lab Analyzer Release
          
          **Build Information:**
          -  Built on: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
          -  Runner: ${{ needs.preflight.outputs.runner-info }}
          -  .NET SDK: ${{ needs.preflight.outputs.dotnet-info }}
          -  Commit: ${{ github.sha }}
          
          **Features:**
          -  Windows Server 2025 Compatible
          -  AI-Powered CASA Analysis
          -  17 Medical Test Types
          -  Arabic RTL Interface
          -  Offline Operation
          
          **Package Contents:**
          - MedicalLabAnalyzer.exe (Self-contained)
          - AI Models and Configuration
          - Database and Resources
          - Documentation and Setup Guide
          
          **System Requirements:**
          - Windows 10/11 (64-bit)
          - 4+ GB RAM (8+ GB recommended)
          - 2+ GB disk space
          - GPU with CUDA support (optional)
          
          **Installation:**
          1. Download the appropriate package for your system
          2. Extract to desired location
          3. Run StartMedicalLabAnalyzer.bat or MedicalLabAnalyzer.exe
          4. Login with default credentials (admin/admin)
          5. Configure AI models as needed
          
          For detailed setup instructions, see INSTALLATION.md in the package.
          "@
          
          $releaseNotes | Out-File -FilePath "RELEASE_NOTES.md" -Encoding UTF8
      
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v1.0.0-${{ github.run_number }}
          name: Medical Lab Analyzer v1.0.0-${{ github.run_number }}
          bodyFile: RELEASE_NOTES.md
          artifacts: "*.zip"
          draft: false
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
