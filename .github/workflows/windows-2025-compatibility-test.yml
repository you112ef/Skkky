# Medical Lab Analyzer - Windows Server 2025 Compatibility Tests
# Automated testing workflow for Windows Server 2025 migration
# Solves GitHub Actions Issue #12677

name: Windows Server 2025 Compatibility Tests

on:
  # Run on all pushes and PRs
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: true
        default: 'full'
        type: choice
        options:
          - quick     # Basic compatibility checks
          - standard  # Standard test suite
          - full      # Complete compatibility test
      
      include_performance_tests:
        description: 'Include performance benchmarks'
        required: false
        default: true
        type: boolean
      
      generate_report:
        description: 'Generate detailed compatibility report'
        required: false
        default: true
        type: boolean

  # Scheduled testing (daily at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'

env:
  # Test configuration
  TEST_SCOPE: ${{ github.event.inputs.test_scope || 'standard' }}
  PERFORMANCE_TESTS: ${{ github.event.inputs.include_performance_tests || 'true' }}
  GENERATE_REPORT: ${{ github.event.inputs.generate_report || 'true' }}
  
  # Project paths
  PROJECT_PATH: MedicalLabAnalyzer
  TEST_RESULTS_PATH: test-results
  
  # Windows Server 2025 specific settings
  EXPECTED_OS_FEATURES: "Server2025,NoD_Drive,EnhancedAI"

jobs:
  # Environment detection and matrix setup
  setup:
    name: Setup Test Matrix
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.matrix.outputs.matrix }}
      should-run-performance: ${{ steps.config.outputs.performance }}
      should-generate-report: ${{ steps.config.outputs.report }}
    
    steps:
      - name: Configure test matrix
        id: matrix
        run: |
          case "${{ env.TEST_SCOPE }}" in
            "quick")
              matrix='{"os":["windows-latest"],"config":["Release"]}'
              ;;
            "standard")
              matrix='{"os":["windows-latest","windows-2022"],"config":["Debug","Release"]}'
              ;;
            "full")
              matrix='{"os":["windows-latest","windows-2022","windows-2019"],"config":["Debug","Release"],"include":[{"os":"windows-latest","experimental":true}]}'
              ;;
          esac
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated test matrix: $matrix"
      
      - name: Configure test options
        id: config
        run: |
          echo "performance=${{ env.PERFORMANCE_TESTS }}" >> $GITHUB_OUTPUT
          echo "report=${{ env.GENERATE_REPORT }}" >> $GITHUB_OUTPUT

  # Core compatibility tests
  compatibility-test:
    name: Compatibility Test (${{ matrix.os }}, ${{ matrix.config }})
    needs: setup
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}
    
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}
    
    outputs:
      os-version: ${{ steps.system-info.outputs.os-version }}
      compatibility-status: ${{ steps.compatibility.outputs.status }}
      performance-score: ${{ steps.performance.outputs.score }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Gather system information
        id: system-info
        shell: powershell
        run: |
          Write-Host "üîç ÿ¨ŸÖÿπ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÜÿ∏ÿßŸÖ / Gathering system information"
          
          $os = Get-CimInstance Win32_OperatingSystem
          $computer = Get-CimInstance Win32_ComputerSystem
          $processor = Get-CimInstance Win32_Processor | Select-Object -First 1
          
          $systemInfo = @{
            OSName = $os.Caption
            OSVersion = $os.Version
            OSBuild = $os.BuildNumber
            Architecture = $os.OSArchitecture
            TotalMemoryGB = [math]::Round($computer.TotalPhysicalMemory / 1GB, 2)
            ProcessorName = $processor.Name
            ProcessorCores = $processor.NumberOfCores
            IsServer2025 = $os.Caption -like "*Server 2025*"
            IsServer2022 = $os.Caption -like "*Server 2022*"
            IsServer2019 = $os.Caption -like "*Server 2019*"
          }
          
          Write-Host "OS: $($systemInfo.OSName)"
          Write-Host "Version: $($systemInfo.OSVersion)"
          Write-Host "Build: $($systemInfo.OSBuild)"
          Write-Host "Memory: $($systemInfo.TotalMemoryGB) GB"
          Write-Host "CPU: $($systemInfo.ProcessorName)"
          Write-Host "Cores: $($systemInfo.ProcessorCores)"
          
          # Output for other steps
          "os-version=$($systemInfo.OSName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "is-server-2025=$($systemInfo.IsServer2025)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "total-memory=$($systemInfo.TotalMemoryGB)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          
          # Check for Windows Server 2025 specific features
          if ($systemInfo.IsServer2025) {
            Write-Host "üÜï Windows Server 2025 detected - running specific tests"
            
            # Check D: drive availability
            if (!(Test-Path "D:\")) {
              Write-Warning "‚ö†Ô∏è D: drive not available (expected on Server 2025)"
              "d-drive-available=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            } else {
              Write-Host "‚úÖ D: drive available (unexpected on Server 2025)"
              "d-drive-available=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            }
          }
      
      - name: Run dependency checks
        shell: powershell
        run: |
          Write-Host "üîß ŸÅÿ≠ÿµ ÿßŸÑÿ™ÿ®ÿπŸäÿßÿ™ / Running dependency checks"
          
          # Check if our dependency check script exists
          if (Test-Path ".\.github\scripts\check-dependencies.ps1") {
            Write-Host "Running comprehensive dependency check..."
            & .\.github\scripts\check-dependencies.ps1 -ProjectType desktop -Detailed -ExportReport -ReportPath "${{ env.TEST_RESULTS_PATH }}\dependencies-${{ matrix.os }}-${{ matrix.config }}.json"
          } else {
            Write-Host "Running basic dependency check..."
            
            # Basic checks
            $checks = @{
              ".NET SDK" = { dotnet --version }
              "Git" = { git --version }
              "PowerShell" = { $PSVersionTable.PSVersion.ToString() }
            }
            
            $results = @{}
            foreach ($name in $checks.Keys) {
              try {
                $version = & $checks[$name] 2>$null
                if ($LASTEXITCODE -eq 0) {
                  Write-Host "‚úÖ $name`: $version"
                  $results[$name] = @{ "Status" = "OK"; "Version" = $version }
                } else {
                  Write-Warning "‚ö†Ô∏è $name`: Command failed"
                  $results[$name] = @{ "Status" = "Failed"; "Error" = "Command execution failed" }
                }
              } catch {
                Write-Warning "‚ö†Ô∏è $name`: $($_.Exception.Message)"
                $results[$name] = @{ "Status" = "Error"; "Error" = $_.Exception.Message }
              }
            }
            
            # Create results directory
            New-Item -ItemType Directory -Path "${{ env.TEST_RESULTS_PATH }}" -Force | Out-Null
            $results | ConvertTo-Json -Depth 3 | Out-File "${{ env.TEST_RESULTS_PATH }}\basic-dependencies-${{ matrix.os }}-${{ matrix.config }}.json"
          }
      
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      
      - name: Verify .NET installation
        shell: powershell
        run: |
          Write-Host "üîç ŸÅÿ≠ÿµ .NET / Verifying .NET installation"
          
          try {
            $dotnetInfo = & dotnet --info 2>&1
            Write-Host ".NET Info:"
            Write-Host $dotnetInfo
            
            $sdks = & dotnet --list-sdks 2>&1
            Write-Host "Available SDKs:"
            Write-Host $sdks
            
            $runtimes = & dotnet --list-runtimes 2>&1
            Write-Host "Available Runtimes:"
            Write-Host $runtimes
            
            # Check if .NET 8.0 is available
            if ($sdks -like "*8.*") {
              Write-Host "‚úÖ .NET 8.0 SDK found"
              "dotnet-8-available=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            } else {
              Write-Warning "‚ö†Ô∏è .NET 8.0 SDK not found"
              "dotnet-8-available=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            }
          } catch {
            Write-Error "‚ùå .NET check failed: $($_.Exception.Message)"
            "dotnet-8-available=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            exit 1
          }
      
      - name: Test workspace directory creation
        shell: powershell
        run: |
          Write-Host "üìÅ ÿßÿÆÿ™ÿ®ÿßÿ± ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ≥ÿßÿ≠ÿ© ÿßŸÑÿπŸÖŸÑ / Testing workspace creation"
          
          # Test D: drive availability and fallback to C:
          $workspaceDir = if (Test-Path "D:\") {
            "D:\test-workspace"
          } else {
            Write-Warning "D: drive not available, using C: drive"
            "C:\test-workspace"
          }
          
          Write-Host "Creating workspace at: $workspaceDir"
          
          try {
            New-Item -ItemType Directory -Path $workspaceDir -Force | Out-Null
            
            # Test file operations
            $testFile = Join-Path $workspaceDir "test-file.txt"
            "Test content" | Out-File $testFile
            
            if (Test-Path $testFile) {
              Write-Host "‚úÖ Workspace operations successful"
              "workspace-test=passed" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            } else {
              Write-Error "‚ùå File creation failed"
              "workspace-test=failed" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            }
            
            # Cleanup
            Remove-Item $workspaceDir -Recurse -Force -ErrorAction SilentlyContinue
            
          } catch {
            Write-Error "‚ùå Workspace test failed: $($_.Exception.Message)"
            "workspace-test=failed" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          }
      
      - name: Test project build
        if: env.TEST_SCOPE != 'quick'
        shell: powershell
        run: |
          Write-Host "üî® ÿßÿÆÿ™ÿ®ÿßÿ± ÿ®ŸÜÿßÿ° ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ / Testing project build"
          
          # Check if project exists
          if (Test-Path "${{ env.PROJECT_PATH }}\${{ env.PROJECT_PATH }}.csproj") {
            Write-Host "Project file found, attempting build..."
            
            try {
              Push-Location ${{ env.PROJECT_PATH }}
              
              # Restore packages
              Write-Host "Restoring packages..."
              & dotnet restore --verbosity minimal
              if ($LASTEXITCODE -ne 0) {
                throw "Package restore failed"
              }
              
              # Build project
              Write-Host "Building project..."
              & dotnet build --configuration ${{ matrix.config }} --no-restore --verbosity minimal
              if ($LASTEXITCODE -ne 0) {
                throw "Build failed"
              }
              
              Write-Host "‚úÖ Build successful"
              "build-test=passed" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
              
            } catch {
              Write-Error "‚ùå Build failed: $($_.Exception.Message)"
              "build-test=failed" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
            } finally {
              Pop-Location
            }
          } else {
            Write-Host "‚ÑπÔ∏è Project file not found, skipping build test"
            "build-test=skipped" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          }
      
      - name: Test AI dependencies
        if: env.TEST_SCOPE == 'full'
        shell: powershell
        run: |
          Write-Host "ü§ñ ÿßÿÆÿ™ÿ®ÿßÿ± ŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä / Testing AI dependencies"
          
          $aiPaths = @(
            "${{ env.PROJECT_PATH }}\AI\YOLOv8",
            "${{ env.PROJECT_PATH }}\AI\DeepSORT",
            "${{ env.PROJECT_PATH }}\AI\Config"
          )
          
          $aiTestResults = @{}
          foreach ($path in $aiPaths) {
            $pathName = Split-Path $path -Leaf
            if (Test-Path $path) {
              Write-Host "‚úÖ AI path found: $pathName"
              $aiTestResults[$pathName] = "Found"
            } else {
              Write-Host "‚ö†Ô∏è AI path missing: $pathName"
              $aiTestResults[$pathName] = "Missing"
            }
          }
          
          # Check for GPU support
          try {
            $gpu = Get-CimInstance Win32_VideoController | Where-Object { $_.Name -notlike "*Basic*" }
            if ($gpu) {
              Write-Host "‚úÖ GPU found: $($gpu[0].Name)"
              $aiTestResults["GPU"] = $gpu[0].Name
            } else {
              Write-Host "‚ÑπÔ∏è No dedicated GPU found"
              $aiTestResults["GPU"] = "None"
            }
          } catch {
            Write-Host "‚ö†Ô∏è Could not check GPU"
            $aiTestResults["GPU"] = "Unknown"
          }
          
          # Save AI test results
          New-Item -ItemType Directory -Path "${{ env.TEST_RESULTS_PATH }}" -Force | Out-Null
          $aiTestResults | ConvertTo-Json | Out-File "${{ env.TEST_RESULTS_PATH }}\ai-test-${{ matrix.os }}-${{ matrix.config }}.json"
      
      - name: Performance benchmarks
        if: needs.setup.outputs.should-run-performance == 'true'
        id: performance
        shell: powershell
        run: |
          Write-Host "üìä ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑÿ£ÿØÿßÿ° / Running performance benchmarks"
          
          $startTime = Get-Date
          
          # Measure system performance
          $process = Get-Process -Id $PID
          $initialMemory = $process.WorkingSet64 / 1MB
          
          Write-Host "Starting performance test..."
          Write-Host "Initial memory: $initialMemory MB"
          
          # Simulate some work
          $testIterations = 1000000
          $sum = 0
          for ($i = 0; $i -lt $testIterations; $i++) {
            $sum += $i
          }
          
          # .NET compilation test
          if (Test-Path "${{ env.PROJECT_PATH }}\${{ env.PROJECT_PATH }}.csproj") {
            Write-Host "Testing .NET compilation performance..."
            $compileStart = Get-Date
            
            Push-Location ${{ env.PROJECT_PATH }}
            try {
              & dotnet build --configuration Release --verbosity quiet
              $compileEnd = Get-Date
              $compileDuration = ($compileEnd - $compileStart).TotalSeconds
              Write-Host "Compilation time: $compileDuration seconds"
            } catch {
              $compileDuration = -1
              Write-Warning "Compilation test failed"
            } finally {
              Pop-Location
            }
          } else {
            $compileDuration = -1
          }
          
          $endTime = Get-Date
          $totalDuration = ($endTime - $startTime).TotalSeconds
          $finalMemory = (Get-Process -Id $PID).WorkingSet64 / 1MB
          $memoryDelta = $finalMemory - $initialMemory
          
          # Calculate performance score (arbitrary scale)
          $cpuScore = if ($totalDuration -lt 5) { 100 } elseif ($totalDuration -lt 10) { 80 } else { 60 }
          $memoryScore = if ($memoryDelta -lt 50) { 100 } elseif ($memoryDelta -lt 100) { 80 } else { 60 }
          $compileScore = if ($compileDuration -gt 0 -and $compileDuration -lt 30) { 100 } elseif ($compileDuration -lt 60) { 80 } else { 60 }
          
          $overallScore = ($cpuScore + $memoryScore + $compileScore) / 3
          
          Write-Host "Performance Results:"
          Write-Host "  Total Duration: $totalDuration seconds"
          Write-Host "  Memory Delta: $memoryDelta MB"
          Write-Host "  Compile Duration: $compileDuration seconds"
          Write-Host "  Overall Score: $overallScore"
          
          # Save performance results
          $perfResults = @{
            "TotalDuration" = $totalDuration
            "MemoryDelta" = $memoryDelta
            "CompileDuration" = $compileDuration
            "CPUScore" = $cpuScore
            "MemoryScore" = $memoryScore
            "CompileScore" = $compileScore
            "OverallScore" = $overallScore
            "Timestamp" = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
          }
          
          New-Item -ItemType Directory -Path "${{ env.TEST_RESULTS_PATH }}" -Force | Out-Null
          $perfResults | ConvertTo-Json | Out-File "${{ env.TEST_RESULTS_PATH }}\performance-${{ matrix.os }}-${{ matrix.config }}.json"
          
          "score=$overallScore" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      
      - name: Compatibility assessment
        id: compatibility
        shell: powershell
        run: |
          Write-Host "üîç ÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿ™ŸàÿßŸÅŸÇ / Assessing compatibility"
          
          $issues = @()
          $warnings = @()
          
          # Check test results
          if ("${{ steps.system-info.outputs.d-drive-available }}" -eq "false") {
            $warnings += "D drive not available (expected on Windows Server 2025)"
          }
          
          if ("${{ steps.dependency-checks.outputs.dotnet-8-available }}" -eq "false") {
            $issues += ".NET 8.0 SDK not available"
          }
          
          if ("${{ steps.workspace-test.outputs.workspace-test }}" -eq "failed") {
            $issues += "Workspace creation failed"
          }
          
          if ("${{ steps.build-test.outputs.build-test }}" -eq "failed") {
            $issues += "Project build failed"
          }
          
          # Determine overall compatibility status
          if ($issues.Count -eq 0) {
            $status = "COMPATIBLE"
            $color = "green"
          } elseif ($issues.Count -le 2) {
            $status = "PARTIALLY_COMPATIBLE"
            $color = "yellow"
          } else {
            $status = "INCOMPATIBLE"
            $color = "red"
          }
          
          Write-Host "Compatibility Status: $status"
          if ($issues.Count -gt 0) {
            Write-Host "Issues:"
            $issues | ForEach-Object { Write-Host "  ‚ùå $_" }
          }
          if ($warnings.Count -gt 0) {
            Write-Host "Warnings:"
            $warnings | ForEach-Object { Write-Host "  ‚ö†Ô∏è $_" }
          }
          
          # Create compatibility report
          $compatReport = @{
            "Status" = $status
            "OS" = "${{ steps.system-info.outputs.os-version }}"
            "Issues" = $issues
            "Warnings" = $warnings
            "TestDate" = Get-Date -Format "yyyy-MM-dd HH:mm:ss UTC"
            "Configuration" = "${{ matrix.config }}"
            "Runner" = "${{ matrix.os }}"
          }
          
          New-Item -ItemType Directory -Path "${{ env.TEST_RESULTS_PATH }}" -Force | Out-Null
          $compatReport | ConvertTo-Json | Out-File "${{ env.TEST_RESULTS_PATH }}\compatibility-${{ matrix.os }}-${{ matrix.config }}.json"
          
          "status=$status" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "issues-count=$($issues.Count)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.config }}
          path: ${{ env.TEST_RESULTS_PATH }}
          retention-days: 30

  # Generate comprehensive compatibility report
  generate-report:
    name: Generate Compatibility Report
    needs: [setup, compatibility-test]
    if: always() && needs.setup.outputs.should-generate-report == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: all-test-results
      
      - name: Generate compatibility report
        shell: bash
        run: |
          echo "üìä ÿ•ŸÜÿ™ÿßÿ¨ ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ™ŸàÿßŸÅŸÇ / Generating compatibility report"
          
          # Create report directory
          mkdir -p compatibility-report
          
          # Start HTML report
          cat > compatibility-report/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Windows Server 2025 Compatibility Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  .header { background: #f0f8ff; padding: 20px; border-radius: 8px; }
                  .compatible { color: green; }
                  .partially-compatible { color: orange; }
                  .incompatible { color: red; }
                  .test-result { margin: 10px 0; padding: 10px; border: 1px solid #ddd; border-radius: 4px; }
                  .summary { background: #f9f9f9; padding: 15px; margin: 20px 0; }
                  table { width: 100%; border-collapse: collapse; }
                  th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                  th { background-color: #f2f2f2; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>ü™ü Windows Server 2025 Compatibility Report</h1>
                  <h2>ÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ™ŸàÿßŸÅŸÇ ŸÖÿπ Windows Server 2025</h2>
                  <p>Generated: $(date)</p>
                  <p>Repository: ${{ github.repository }}</p>
                  <p>Commit: ${{ github.sha }}</p>
              </div>
          EOF
          
          # Process test results
          echo "<div class='summary'>" >> compatibility-report/index.html
          echo "<h2>üìã Test Summary / ŸÖŸÑÿÆÿµ ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ±ÿßÿ™</h2>" >> compatibility-report/index.html
          echo "<table>" >> compatibility-report/index.html
          echo "<tr><th>OS</th><th>Configuration</th><th>Status</th><th>Issues</th><th>Performance</th></tr>" >> compatibility-report/index.html
          
          # Count results
          total_tests=0
          compatible_tests=0
          
          # Process each test result
          for result_dir in all-test-results/test-results-*; do
            if [ -d "$result_dir" ]; then
              total_tests=$((total_tests + 1))
              
              # Extract OS and config from directory name
              dir_name=$(basename "$result_dir")
              os_config=${dir_name#test-results-}
              
              # Look for compatibility report
              if [ -f "$result_dir/compatibility-*.json" ]; then
                compat_file=$(ls "$result_dir"/compatibility-*.json | head -1)
                
                # Parse JSON (simplified)
                status=$(grep -o '"Status":"[^"]*"' "$compat_file" | cut -d'"' -f4)
                issues_count=$(grep -o '"Issues":\[[^\]]*\]' "$compat_file" | grep -o ',' | wc -l)
                issues_count=$((issues_count + 1))
                
                if [ "$status" = "COMPATIBLE" ]; then
                  compatible_tests=$((compatible_tests + 1))
                  status_class="compatible"
                elif [ "$status" = "PARTIALLY_COMPATIBLE" ]; then
                  status_class="partially-compatible"
                else
                  status_class="incompatible"
                fi
                
                # Get performance score if available
                perf_score="N/A"
                if [ -f "$result_dir/performance-*.json" ]; then
                  perf_file=$(ls "$result_dir"/performance-*.json | head -1)
                  perf_score=$(grep -o '"OverallScore":[0-9.]*' "$perf_file" | cut -d':' -f2)
                fi
                
                echo "<tr><td>$os_config</td><td>Release</td><td class='$status_class'>$status</td><td>$issues_count</td><td>$perf_score</td></tr>" >> compatibility-report/index.html
              fi
            fi
          done
          
          echo "</table>" >> compatibility-report/index.html
          
          # Add summary statistics
          success_rate=$((compatible_tests * 100 / total_tests))
          echo "<h3>üìä Statistics / ÿßŸÑÿ•ÿ≠ÿµÿßÿ¶Ÿäÿßÿ™</h3>" >> compatibility-report/index.html
          echo "<ul>" >> compatibility-report/index.html
          echo "<li>Total Tests: $total_tests</li>" >> compatibility-report/index.html
          echo "<li>Compatible: $compatible_tests</li>" >> compatibility-report/index.html
          echo "<li>Success Rate: $success_rate%</li>" >> compatibility-report/index.html
          echo "</ul>" >> compatibility-report/index.html
          echo "</div>" >> compatibility-report/index.html
          
          # Add recommendations
          echo "<div class='summary'>" >> compatibility-report/index.html
          echo "<h2>üí° Recommendations / ÿßŸÑÿ™ŸàÿµŸäÿßÿ™</h2>" >> compatibility-report/index.html
          
          if [ $success_rate -ge 90 ]; then
            echo "<p class='compatible'>‚úÖ High compatibility rate. Ready for Windows Server 2025 migration.</p>" >> compatibility-report/index.html
            echo "<p class='compatible'>‚úÖ ŸÖÿπÿØŸÑ ÿ™ŸàÿßŸÅŸÇ ÿπÿßŸÑŸä. ÿ¨ÿßŸáÿ≤ ŸÑŸÑÿ™ÿ±ÿ≠ŸäŸÑ ÿ•ŸÑŸâ Windows Server 2025.</p>" >> compatibility-report/index.html
          elif [ $success_rate -ge 70 ]; then
            echo "<p class='partially-compatible'>‚ö†Ô∏è Moderate compatibility. Address identified issues before migration.</p>" >> compatibility-report/index.html
            echo "<p class='partially-compatible'>‚ö†Ô∏è ÿ™ŸàÿßŸÅŸÇ ŸÖÿ™Ÿàÿ≥ÿ∑. ÿπÿßŸÑÿ¨ ÿßŸÑŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑŸÖÿ≠ÿØÿØÿ© ŸÇÿ®ŸÑ ÿßŸÑÿ™ÿ±ÿ≠ŸäŸÑ.</p>" >> compatibility-report/index.html
          else
            echo "<p class='incompatible'>‚ùå Low compatibility. Significant work needed before migration.</p>" >> compatibility-report/index.html
            echo "<p class='incompatible'>‚ùå ÿ™ŸàÿßŸÅŸÇ ŸÖŸÜÿÆŸÅÿ∂. ŸÖÿ∑ŸÑŸàÿ® ÿπŸÖŸÑ ŸÉÿ®Ÿäÿ± ŸÇÿ®ŸÑ ÿßŸÑÿ™ÿ±ÿ≠ŸäŸÑ.</p>" >> compatibility-report/index.html
          fi
          
          echo "</div>" >> compatibility-report/index.html
          
          # Close HTML
          echo "</body></html>" >> compatibility-report/index.html
          
          # Create markdown summary
          cat > compatibility-report/SUMMARY.md << EOF
          # Windows Server 2025 Compatibility Test Results
          
          ## Summary
          - **Total Tests**: $total_tests
          - **Compatible**: $compatible_tests
          - **Success Rate**: $success_rate%
          - **Test Date**: $(date)
          
          ## Status
          EOF
          
          if [ $success_rate -ge 90 ]; then
            echo "‚úÖ **HIGH COMPATIBILITY** - Ready for migration" >> compatibility-report/SUMMARY.md
          elif [ $success_rate -ge 70 ]; then
            echo "‚ö†Ô∏è **MODERATE COMPATIBILITY** - Some issues to address" >> compatibility-report/SUMMARY.md
          else
            echo "‚ùå **LOW COMPATIBILITY** - Significant work needed" >> compatibility-report/SUMMARY.md
          fi
          
          echo "" >> compatibility-report/SUMMARY.md
          echo "Full report available in [index.html](./index.html)" >> compatibility-report/SUMMARY.md
      
      - name: Upload compatibility report
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-report
          path: compatibility-report
          retention-days: 90
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './compatibility-report/SUMMARY.md';
            
            if (fs.existsSync(path)) {
              const summary = fs.readFileSync(path, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ü™ü Windows Server 2025 Compatibility Test Results\n\n${summary}\n\nüìä [View Full Report](../actions/runs/${{ github.run_id }})`
              });
            }

  # Notify on test failures
  notify:
    name: Notify Results
    needs: [compatibility-test, generate-report]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Check overall results
        run: |
          echo "üîç Checking overall test results"
          
          # Check if any critical tests failed
          if echo '${{ toJson(needs.compatibility-test.result) }}' | grep -q "failure"; then
            echo "‚ùå Some compatibility tests failed"
            echo "OVERALL_STATUS=FAILED" >> $GITHUB_ENV
          else
            echo "‚úÖ All compatibility tests passed"
            echo "OVERALL_STATUS=PASSED" >> $GITHUB_ENV
          fi
      
      - name: Set job summary
        run: |
          echo "## ü™ü Windows Server 2025 Compatibility Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ env.OVERALL_STATUS }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Scope**: ${{ env.TEST_SCOPE }}" >> $GITHUB_STEP_SUMMARY
          echo "**Performance Tests**: ${{ env.PERFORMANCE_TESTS }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results by OS" >> $GITHUB_STEP_SUMMARY
          echo "| OS | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|----|----|-------|" >> $GITHUB_STEP_SUMMARY
          
          # Add results for each OS tested
          if echo '${{ toJson(needs.compatibility-test.outputs) }}' | grep -q "windows-latest"; then
            echo "| windows-latest (Server 2025) | ‚úÖ Tested | Primary target for migration |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if echo '${{ toJson(needs.compatibility-test.outputs) }}' | grep -q "windows-2022"; then
            echo "| windows-2022 | ‚úÖ Tested | Current stable baseline |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Detailed Report**: Download the 'compatibility-report' artifact for complete analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ env.OVERALL_STATUS }}" = "PASSED" ]; then
            echo "- ‚úÖ All tests passed - ready for Windows Server 2025" >> $GITHUB_STEP_SUMMARY
            echo "- üìù Review performance benchmarks" >> $GITHUB_STEP_SUMMARY
            echo "- üöÄ Consider enabling windows-latest in production workflows" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Address failing tests before migration" >> $GITHUB_STEP_SUMMARY
            echo "- üìã Review detailed error logs" >> $GITHUB_STEP_SUMMARY
            echo "- üîß Update code to handle Windows Server 2025 changes" >> $GITHUB_STEP_SUMMARY
          fi